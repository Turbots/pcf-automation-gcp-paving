---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: beta-backend
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet.api-api-token))
    product_slug: platform-automation
    product_version: 2\.(.*) # pin to major version 1
    sort_by: semver

- name: env-state-gcp
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: ((gcp.buckets.terraform))
      prefix: ((pas.env_name))
      credentials: ((gcp.gcp_service_account))
    vars:
      project: ((gcp.project))
      region: ((gcp.region))
      zones: ((gcp.zones))
      service_account_key: ((gcp.gcp_service_account))
      buckets_location: ((gcp.buckets_location))
      dns_suffix: ((gcp.parent_zone.dns_suffix))
      ssl_cert: ((pas.ssl_cert.certificate))
      ssl_private_key: ((pas.ssl_cert.private_key))
      opsman_vm: false
      opsman_image_url: ""

# buckets

- name: platform-automation-tasks
  type: gcs-resource
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: gcs-resource
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: platform-automation-image-(.*).tgz

- name: opsman-image
  type: gcs-resource
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: OpsManager(.*)onGCP.yml

- name: pas-product
  type: gcs-resource
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: cf-(.*).pivotal

- name: pas-stemcell
  type: gcs-resource
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: pas-stemcell/light-bosh-stemcell-(.*)-google.*\.tgz #light-bosh-stemcell-170.24-google-kvm-ubuntu-xenial-go_agent.tgz

- name: installation
  type: gcs-resource
  source:
    bucket: ((gcp.buckets.installation))
    json_key: ((gcp.gcp_service_account))
    versioned_file: installation.zip

# configurations
- name: pcf-automation-source
  type: git
  source:
    private_key: ((github.private_key))
    uri: ((github.repos.pcf-automation-source.uri))
    branch: master

- name: configuration
  type: git
  source:
    private_key: ((github.private_key))
    uri: ((github.repos.configuration.uri))
    branch: master

# triggers used to have jobs do something in a timely manner

- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: daily-trigger
  type: time
  source:
    interval: 24h

jobs:
- name: terraforming-gcp
  serial: true
  public: false
  plan:
  - get: pcf-automation-source
    trigger: true
  - put: env-state-gcp
    params:
      env_name: ((pas.env_name))
      terraform_source: pcf-automation-source/terraforming-gcp/terraforming-pas
      delete_on_failure: false

- name: template-configuration
  serial: true
  public: false
  plan:
  - aggregate:
    - get: pcf-automation-source
      trigger: true
      passed: [terraforming-gcp]
    - get: configuration
    - get: env-state-gcp
  - task: add-new-templates
    input_mapping:
      config: configuration
      pcf-automation: pcf-automation-source
    params:
      ENV_NAME: ((pas.env_name))
      GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@banck.net"
      GIT_AUTHOR_NAME: "PCF Automation Bot"
      COMMIT_MESSAGE: 'Update template files'
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine/git
      inputs:
        - name: config
        - name: pcf-automation
      outputs:
        - name: config-commit
      run:
        path: /bin/sh
        args:
          - -c
          - |
              set -eux
              git clone config config-commit
              mkdir -p config-commit/$ENV_NAME/state
              touch config-commit/$ENV_NAME/state/state.yml
              cp -a pcf-automation/templates/* config-commit/$ENV_NAME
              git config --global user.email "$GIT_AUTHOR_EMAIL"
              git config --global user.name "$GIT_AUTHOR_NAME"
              cd config-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
  - put: configuration
    params:
      repository: config-commit
      merge: true
  - task: update-ns
    file: pcf-automation-source/tasks/manage-gcp-ns.yml
    input_mapping:
      terraform-output: env-state-gcp
    params:
      ENV_NAME: ((pas.env_name))
      GCP_AUTH_JSON: ((gcp.gcp_service_account))
      PROJECT: ((gcp.project))
      PARENT_ZONE_NAME: ((gcp.parent_zone.name))
      ACTION: "add"
- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

### FETCH JOBS
- name: fetch-opsman
  serial: true
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      passed: [template-configuration]
    - get: pcf-automation-source
    - get: env-state-gcp
    - get: daily-trigger
      trigger: true
  - &interpolate
    task: interpolate-config
    file: pcf-automation-source/tasks/interpolate.yml
    input_mapping:
      config: configuration
      terraform-output: env-state-gcp
    output_mapping:
      interpolated-config: configuration-interpolated
    params:
      ENV_NAME: ((pas.env_name))
      PIVNET_API_TOKEN: ((pivnet.api-api-token))
      GCP_AUTH_JSON: ((gcp.gcp_service_account))
      OM_USERNAME: ((opsman.username))
      OM_PASSWORD: ((opsman.password))
      OM_DECRYPTION_PASSPHRASE: ((opsman.decryption-passphrase))
      CLOUD_CONTROLLER_ENCRYPT_KEY: ((pas.cloud_controller_encrypt_key))
      MYSQL_EMAIL: ((pas.mysql_email))
      CREDHUB_KEY_ENCRYPTION_PASSWORD: ((pas.credhub_key_encryption_password))
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/opsman.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/vars.yml
    input_mapping:
      config: configuration-interpolated
  - aggregate:
    - put: opsman-image
      params:
        file: downloaded-product/*

- name: fetch-pas
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
      passed: [template-configuration]
    - get: pcf-automation-source
    - get: env-state-gcp
    - get: daily-trigger
      trigger: true
  - <<: *interpolate
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/pas.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/vars.yml
    input_mapping:
      config: configuration-interpolated
    output_mapping:
      downloaded-stemcell: pas-stemcell
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

# INSTALL JOBS

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: opsman-image
      passed: [fetch-opsman]
    - get: configuration
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      state: configuration
      config: configuration-interpolated
    params:
      VARS_FILES: config/((pas.env_name))/config/opsman-vars.yml
      STATE_FILE: ((pas.env_name))/state/state.yml
      OPSMAN_CONFIG_FILE: ((pas.env_name))/config/opsman.yml
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: configuration
            file-source: generated-state
          output_mapping:
            repository-commit: configuration-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((pas.env_name))/state/state.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
            GIT_AUTHOR_NAME: "PCF Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: configuration
          params:
            repository: configuration-commit
            merge: true
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: configuration-interpolated
      config: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
      AUTH_CONFIG_FILE: ((pas.env_name))/config/auth.yml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration-interpolated
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((pas.env_name))/config/director.yml
      VARS_FILES: config/((pas.env_name))/config/director-vars.yml
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
# UPGRADE

- name: export-installation
  serial: true
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-source
    - get: env-state-gcp
      passed: [ install-opsman ]
  - <<: *interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
  - put: installation
    params:
      file: installation/installation.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: one-time-trigger
      passed: [ install-opsman ]
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: opsman-image
    - get: installation
      passed: [ export-installation ]
    - get: configuration
      trigger: true
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: upgrade-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
      state: configuration
      config: configuration-interpolated
      env: configuration-interpolated
      vars: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
      VARS_FILES: config/((pas.env_name))/config/opsman-vars.yml
      STATE_FILE: ((pas.env_name))/state/state.yml
      OPSMAN_CONFIG_FILE: ((pas.env_name))/config/opsman.yml
    ensure: *make-state-commit
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml

- name: upload-and-stage-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pas-product
      trigger: true
    - get: configuration
      passed:
      - upgrade-opsman
      trigger: true
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-product
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml

- name: upload-stemcell
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: pas-stemcell
      trigger: true
    - get: configuration
      passed:
      - upgrade-opsman
      trigger: true
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: upload-pas-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration-interpolated
      stemcell: pas-stemcell
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml

- name: configure-pas
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
      passed:
      - upload-and-stage-pas
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: configure-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration-interpolated
      env: configuration-interpolated
    params:
      CONFIG_FILE: ((pas.env_name))/config/cf.yml
      VARS_FILES: config/((pas.env_name))/config/cf-vars.yml
      ENV_FILE: ((pas.env_name))/env/env.yml

- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: platform-automation-image
      params:
        unpack: true
      passed:
      - configure-pas
      trigger: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pas.env_name))/env/env.yml

# DESTROY

- name: destroy
  serial: true
  public: false
  plan:
  - aggregate:
    - get: pcf-automation-source
      trigger: false
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: env-state-gcp
  - do:
    - task: interpolate-config
      file: pcf-automation-source/tasks/interpolate.yml
      input_mapping:
        config: configuration
        terraform-output: env-state-gcp
      output_mapping:
        interpolated-config: configuration-interpolated
      params:
        ENV_NAME: ((pas.env_name))
        PIVNET_API_TOKEN: ((pivnet.api-api-token))
        GCP_AUTH_JSON: ((gcp.gcp_service_account))
        OM_USERNAME: ((opsman.username))
        OM_PASSWORD: ((opsman.password))
        OM_DECRYPTION_PASSPHRASE: ((opsman.decryption-passphrase))
    - task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        env: configuration-interpolated
      params:
        ENV_FILE: ((pas.env_name))/env/env.yml
    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        state: configuration
        config: configuration-interpolated
      params:
        VARS_FILES: config/((pas.env_name))/config/opsman-vars.yml
        STATE_FILE: ((pas.env_name))/state/state.yml
        OPSMAN_CONFIG_FILE: ((pas.env_name))/config/opsman.yml
    - put: env-state-gcp
      params:
        terraform_source: pcf-automation-source/terraforming-gcp/terraforming-pas
        delete_on_failure: true
        env_name: ((pas.env_name))
        action: destroy
      get_params:
        action: destroy
    - task: remove-ns
      file: pcf-automation-source/tasks/manage-gcp-ns.yml
      input_mapping:
        terraform-output: env-state-gcp
      params:
        ENV_NAME: ((pas.env_name))
        GCP_AUTH_JSON: ((gcp.gcp_service_account))
        PROJECT: ((gcp.project))
        PARENT_ZONE_NAME: ((gcp.parent_zone.name))
        ACTION: "remove"
    - task: delete-config
      input_mapping:
        config: configuration
      params:
        ENV_NAME: ((pas.env_name))
        GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@banck.net"
        GIT_AUTHOR_NAME: "PCF Automation Bot"
        COMMIT_MESSAGE: 'Delete Environment'
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine/git
        inputs:
          - name: config
        outputs:
          - name: config-commit
        run:
          path: /bin/sh
          args:
            - -c
            - |
                set -eux
                git clone config config-commit
                rm -rf config-commit/$ENV_NAME
                git config --global user.email "$GIT_AUTHOR_EMAIL"
                git config --global user.name "$GIT_AUTHOR_NAME"
                cd config-commit
                git add -A
                git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
    - put: configuration
      params:
        repository: config-commit
        merge: true

groups:
- name: prepare
  jobs:
  - terraforming-gcp
  - template-configuration
  - fetch-platform-automation
- name: fetch
  jobs:
  - fetch-opsman
  - fetch-pas
- name: install
  jobs:
  - install-opsman
- name: upgrade
  jobs:
  - export-installation
  - upgrade-opsman
  - upload-and-stage-pas
  - upload-stemcell
  - configure-pas
  - apply-product-changes

- name: destroy
  jobs:
  - destroy
