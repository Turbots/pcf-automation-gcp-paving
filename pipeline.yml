---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: beta-backend
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet.api-api-token))
    product_slug: platform-automation
    product_version: 1\.(.*) # pin to major version 1
    sort_by: semver

- name: env-state-gcp
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: ((gcp.buckets.terraform))
      prefix: ((pas.env_name))
      credentials: ((gcp.gcp_service_account))
    vars:
      project: ((gcp.project))
      region: ((gcp.region))
      zones: ((gcp.zones))
      service_account_key: ((gcp.gcp_service_account))
      buckets_location: ((gcp.buckets_location))
      dns_suffix: ((pas.dns_suffix))
      ssl_cert: ((pas.ssl_cert.certificate))
      ssl_private_key: ((pas.ssl_cert.private_key))
      opsman_vm: false
      opsman_image_url: ""

# buckets

- name: platform-automation-tasks
  type: gcs-resource
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: gcs-resource
  source:
    bucket: ((gcp.buckets.pivnet_products))
    json_key: ((gcp.gcp_service_account))
    regexp: platform-automation-image-(.*).tgz

- name: opsman-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.pivnet_products))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: OpsManager(.*)onGCP.yml

# configurations
- name: pcf-automation-source
  type: git
  source:
    private_key: ((github.private_key))
    uri: ((github.repos.pcf-automation-source.uri))
    branch: master

- name: configuration
  type: git
  source:
    private_key: ((github.private_key))
    uri: ((github.repos.configuration.uri))
    branch: master

jobs:
- name: terraforming-gcp
  serial: true
  public: false
  plan:
  - get: pcf-automation-source
    trigger: true
  - put: env-state-gcp
    params:
      env_name: ((pas.env_name))
      terraform_source: pcf-automation-source/terraforming-gcp/terraforming-pas
      delete_on_failure: false

- name: template-configuration
  serial: true
  public: false
  plan:
  - aggregate:
    - get: pcf-automation-source
      trigger: true
      passed: [terraforming-gcp]
    - get: configuration
  - task: add-new-templates
    input_mapping:
      config: configuration
      pcf-automation: pcf-automation-source
    params:
      ENV_NAME: ((pas.env_name))
      GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@banck.net"
      GIT_AUTHOR_NAME: "PCF Automation Bot"
      COMMIT_MESSAGE: 'Update template files'
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine/git
      inputs:
        - name: config
        - name: pcf-automation
      outputs:
        - name: config-commit
      run:
        path: /bin/sh
        args:
          - -c
          - |
              set -eux
              git clone config config-commit
              mkdir -p config-commit/$ENV_NAME
              cp -a pcf-automation/templates/* config-commit/$ENV_NAME
              git config --global user.email "$GIT_AUTHOR_EMAIL"
              git config --global user.name "$GIT_AUTHOR_NAME"
              cd config-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
  - put: configuration
    params:
      repository: config-commit
      merge: true

- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz


- name: fetch-opsman
  serial: true
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: platform-automation-tasks
      passed: [fetch-platform-automation]
      params:
        unpack: true
    - get: configuration
    - get: pcf-automation-source
    - get: env-state-gcp
      passed: [terraforming-gcp]
  - task: interpolate-config
    file: pcf-automation-source/tasks/interpolate.yml
    input_mapping:
      config: configuration
      terraform-output: env-state-gcp
    output_mapping:
      interpolated-config: configuration
    params:
      ENV_NAME: ((pas.env_name))
      PIVNET_API_TOKEN: ((pivnet.api-api-token))
      GCP_AUTH_JSON: ((gcp.gcp_service_account))
      OM_USERNAME: ((opsman.username))
      OM_PASSWORD: ((opsman.password))
      OM_DECRYPTION_PASSPHRASE: ((opsman.decryption-passphrase))
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: ((pas.env_name))/download-product-configs/opsman.yml
      VARS_FILES: config/((pas.env_name))/download-product-configs/opsman-vars.yml
    input_mapping:
      config: configuration
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: destroy-gcp
  serial: true
  public: false
  plan:
  - aggregate:
    - get: pcf-automation-source
      trigger: false
  - do:
    - put: env-state-gcp
      params:
        terraform_source: pcf-automation-source/terraforming-gcp/terraforming-pas
        delete_on_failure: true
        env_name: ((pas.env_name))
        action: destroy
      get_params:
        action: destroy
